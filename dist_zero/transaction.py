'''
Distributed Transactions in DistZero.

Each transaction exists not as a single python object, but as a collection
of related `TransactionRole` instances, each living on its own `Node`
'''

from dist_zero import errors


class TransactionController(object):
  '''
  Controller object to allow `TransactionRole` instances to interact with the overall transaction.
  '''

  def __init__(self, node: 'dist_zero.node.node.Node'):
    self.finished = False
    self.node = node

  def new_handle(self, for_node_id):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def transfer_handle(self, role_handle, for_node_id):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def enlist(self, node_handle, participant: 'ParticipantRole'):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def send(self, role_handle, message):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def finish(self):
    '''
    Finish running this role on the current node.
    '''
    if self.finished:
      raise errors.InternalError("Transaction role was already finished.")
    else:
      self.finished = True
      self.node.finish_role(self)


class TransactionRole(object):
  '''
  Abstract base class for all transaction roles.
  '''

  def initialize(self, controller: TransactionController):
    raise RuntimeError(f"Abstract Superclass {self.__class__}")


class OriginatorRole(TransactionRole):
  '''
  Abstract base class for `TransactionRole` instances that originate their transaction.
  '''


class ParticipantRole(TransactionRole):
  '''
  Abstract base class for `TransactionRole` instances that participate in a
  transaction originated by a separate `TransactionRole`.
  '''

  def to_config(self):
    '''
    :return: A json serializable python object describing this `ParticipantRole`.  It should deserialize
      with `ParticipantRole.from_config` to a `ParticipantRole` equivalent to ``self``.
    :rtype: object
    '''

  @staticmethod
  def from_config(participant_config: object):
    '''
    Parse a config generated by `ParticipantRole.to_config`

    :param object participant_config: The config.
    :return: The parsed `ParticipantRole`.
    :rtype: `ParticipantRole`
    '''
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()
