'''
Distributed Transactions in DistZero.

Each transaction exists not as a single python object, but as a collection
of related `TransactionRole` instances, each living on its own `Node`
'''

from dist_zero import errors


class TransactionController(object):
  '''
  Controller object to allow `TransactionRole` instances to interact with the overall transaction.
  '''

  def __init__(self, node: 'dist_zero.node.node.Node'):
    self.node = node

  def new_handle(self, for_node_id):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def transfer_handle(self, role_handle, for_node_id):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def role_handle_to_node_handle(self, role_handle):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def enlist(self, node_handle, participant: 'ParticipantRole'):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()

  def send(self, role_handle, message):
    # FIXME(KK): Implement this
    import ipdb
    ipdb.set_trace()


class TransactionRole(object):
  '''
  Abstract base class for all transaction roles.
  '''

  async def run(self, controller: TransactionController):
    '''
    Run exactly once when this `TransactionRole` instance starts to run.

    :param controller: A controller object for interacting with the overall transaction.
    :type controller: TransactionController
    '''
    raise RuntimeError(f"Abstract Superclass {self.__class__}")


class OriginatorRole(TransactionRole):
  '''
  Abstract base class for `TransactionRole` instances that originate their transaction.
  '''
  pass


class ParticipantRole(TransactionRole):
  '''
  Abstract base class for `TransactionRole` instances that participate in a
  transaction originated by a separate `TransactionRole`.
  '''

  @staticmethod
  def from_config(typename: str, participant_config: object):
    '''
    Parse a config generated by `ParticipantRole.to_config`

    :param object participant_config: The config.
    :return: The parsed `ParticipantRole`.
    :rtype: `ParticipantRole`
    '''
    from dist_zero import all_transactions
    if typename in all_transactions.__dict__:
      return all_transactions.__dict__[typename](**participant_config)
    else:
      raise errors.InternalError(
          f"Unrecognized transaction type name \"{typename}\" not found in dist_zero.all_transactions.")
